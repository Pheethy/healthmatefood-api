// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"
)

// IUserHandler is an autogenerated mock type for the IUserHandler type
type IUserHandler struct {
	mock.Mock
}

// CreateUserInfo provides a mock function with given fields: c
func (_m *IUserHandler) CreateUserInfo(c *fiber.Ctx) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAllUsers provides a mock function with given fields: c
func (_m *IUserHandler) FetchAllUsers(c *fiber.Ctx) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchOneUserById provides a mock function with given fields: c
func (_m *IUserHandler) FetchOneUserById(c *fiber.Ctx) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for FetchOneUserById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchOneUserInfoByUserId provides a mock function with given fields: c
func (_m *IUserHandler) FetchOneUserInfoByUserId(c *fiber.Ctx) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for FetchOneUserInfoByUserId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshUserPassport provides a mock function with given fields: c
func (_m *IUserHandler) RefreshUserPassport(c *fiber.Ctx) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for RefreshUserPassport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignIn provides a mock function with given fields: c
func (_m *IUserHandler) SignIn(c *fiber.Ctx) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for SignIn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignUp provides a mock function with given fields: c
func (_m *IUserHandler) SignUp(c *fiber.Ctx) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignUpAdmin provides a mock function with given fields: c
func (_m *IUserHandler) SignUpAdmin(c *fiber.Ctx) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for SignUpAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUserHandler creates a new instance of IUserHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserHandler {
	mock := &IUserHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
