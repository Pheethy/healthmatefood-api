// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "healthmatefood-api/models"

	mock "github.com/stretchr/testify/mock"

	sync "sync"

	uuid "github.com/gofrs/uuid"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

// FetchAllUsers provides a mock function with given fields: ctx, args
func (_m *IUserRepository) FetchAllUsers(ctx context.Context, args *sync.Map) ([]*models.User, error) {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllUsers")
	}

	var r0 []*models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sync.Map) ([]*models.User, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sync.Map) []*models.User); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sync.Map) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOneOAuthByRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *IUserRepository) FetchOneOAuthByRefreshToken(ctx context.Context, refreshToken string) (*models.OAuth, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for FetchOneOAuthByRefreshToken")
	}

	var r0 *models.OAuth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.OAuth, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.OAuth); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OAuth)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOneUserByEmail provides a mock function with given fields: ctx, email
func (_m *IUserRepository) FetchOneUserByEmail(ctx context.Context, email string) (*models.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FetchOneUserByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOneUserById provides a mock function with given fields: ctx, id
func (_m *IUserRepository) FetchOneUserById(ctx context.Context, id *uuid.UUID) (*models.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FetchOneUserById")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID) (*models.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOneUserInfoByUserId provides a mock function with given fields: ctx, userId
func (_m *IUserRepository) FetchOneUserInfoByUserId(ctx context.Context, userId *uuid.UUID) (*models.UserInfo, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for FetchOneUserInfoByUserId")
	}

	var r0 *models.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID) (*models.UserInfo, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID) *models.UserInfo); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertImages provides a mock function with given fields: ctx, _a1
func (_m *IUserRepository) UpsertImages(ctx context.Context, _a1 *models.User) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpsertImages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertOAuth provides a mock function with given fields: ctx, oauth
func (_m *IUserRepository) UpsertOAuth(ctx context.Context, oauth *models.OAuth) error {
	ret := _m.Called(ctx, oauth)

	if len(ret) == 0 {
		panic("no return value specified for UpsertOAuth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.OAuth) error); ok {
		r0 = rf(ctx, oauth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertUser provides a mock function with given fields: ctx, _a1
func (_m *IUserRepository) UpsertUser(ctx context.Context, _a1 *models.User) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpsertUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertUserInfo provides a mock function with given fields: ctx, userInfo
func (_m *IUserRepository) UpsertUserInfo(ctx context.Context, userInfo *models.UserInfo) error {
	ret := _m.Called(ctx, userInfo)

	if len(ret) == 0 {
		panic("no return value specified for UpsertUserInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserInfo) error); ok {
		r0 = rf(ctx, userInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepository {
	mock := &IUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
