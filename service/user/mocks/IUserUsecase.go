// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "healthmatefood-api/models"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	sync "sync"

	uuid "github.com/gofrs/uuid"
)

// IUserUsecase is an autogenerated mock type for the IUserUsecase type
type IUserUsecase struct {
	mock.Mock
}

// FetchAllUsers provides a mock function with given fields: ctx, args
func (_m *IUserUsecase) FetchAllUsers(ctx context.Context, args *sync.Map) ([]*models.User, error) {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllUsers")
	}

	var r0 []*models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sync.Map) ([]*models.User, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sync.Map) []*models.User); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sync.Map) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOneUserById provides a mock function with given fields: ctx, id
func (_m *IUserUsecase) FetchOneUserById(ctx context.Context, id *uuid.UUID) (*models.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FetchOneUserById")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID) (*models.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUserPassport provides a mock function with given fields: ctx, req
func (_m *IUserUsecase) FetchUserPassport(ctx context.Context, req *models.User) (*models.UserPassport, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for FetchUserPassport")
	}

	var r0 *models.UserPassport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) (*models.UserPassport, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *models.UserPassport); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserPassport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshUserPassport provides a mock function with given fields: ctx, refreshToken
func (_m *IUserUsecase) RefreshUserPassport(ctx context.Context, refreshToken string) (*models.UserPassport, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshUserPassport")
	}

	var r0 *models.UserPassport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.UserPassport, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.UserPassport); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserPassport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertUser provides a mock function with given fields: ctx, _a1, isAdmin, files
func (_m *IUserUsecase) UpsertUser(ctx context.Context, _a1 *models.User, isAdmin bool, files []*multipart.FileHeader) error {
	ret := _m.Called(ctx, _a1, isAdmin, files)

	if len(ret) == 0 {
		panic("no return value specified for UpsertUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User, bool, []*multipart.FileHeader) error); ok {
		r0 = rf(ctx, _a1, isAdmin, files)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertUserInfo provides a mock function with given fields: ctx, userInfo
func (_m *IUserUsecase) UpsertUserInfo(ctx context.Context, userInfo *models.UserInfo) error {
	ret := _m.Called(ctx, userInfo)

	if len(ret) == 0 {
		panic("no return value specified for UpsertUserInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserInfo) error); ok {
		r0 = rf(ctx, userInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUserUsecase creates a new instance of IUserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserUsecase {
	mock := &IUserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
